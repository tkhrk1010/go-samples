// parent/protoの複製。
// child/配下に置かないとdocker buildできないからcopyしてきたが、これでは2重管理になってしまう。
// どうやって対処するのかわからないので、一旦このままにしている。

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: proto/actor.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ActorService_CreateChild_FullMethodName = "/actor.ActorService/CreateChild"
	ActorService_HealthCheck_FullMethodName = "/actor.ActorService/HealthCheck"
)

// ActorServiceClient is the client API for ActorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActorServiceClient interface {
	CreateChild(ctx context.Context, in *CreateChildRequest, opts ...grpc.CallOption) (*CreateChildResponse, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type actorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActorServiceClient(cc grpc.ClientConnInterface) ActorServiceClient {
	return &actorServiceClient{cc}
}

func (c *actorServiceClient) CreateChild(ctx context.Context, in *CreateChildRequest, opts ...grpc.CallOption) (*CreateChildResponse, error) {
	out := new(CreateChildResponse)
	err := c.cc.Invoke(ctx, ActorService_CreateChild_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, ActorService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActorServiceServer is the server API for ActorService service.
// All implementations must embed UnimplementedActorServiceServer
// for forward compatibility
type ActorServiceServer interface {
	CreateChild(context.Context, *CreateChildRequest) (*CreateChildResponse, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedActorServiceServer()
}

// UnimplementedActorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedActorServiceServer struct {
}

func (UnimplementedActorServiceServer) CreateChild(context.Context, *CreateChildRequest) (*CreateChildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChild not implemented")
}
func (UnimplementedActorServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedActorServiceServer) mustEmbedUnimplementedActorServiceServer() {}

// UnsafeActorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActorServiceServer will
// result in compilation errors.
type UnsafeActorServiceServer interface {
	mustEmbedUnimplementedActorServiceServer()
}

func RegisterActorServiceServer(s grpc.ServiceRegistrar, srv ActorServiceServer) {
	s.RegisterService(&ActorService_ServiceDesc, srv)
}

func _ActorService_CreateChild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorServiceServer).CreateChild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActorService_CreateChild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorServiceServer).CreateChild(ctx, req.(*CreateChildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActorService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActorService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActorService_ServiceDesc is the grpc.ServiceDesc for ActorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "actor.ActorService",
	HandlerType: (*ActorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChild",
			Handler:    _ActorService_CreateChild_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _ActorService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/actor.proto",
}
